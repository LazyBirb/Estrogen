plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.5-SNAPSHOT" apply false
    id "me.modmuss50.mod-publish-plugin" version "0.4.5"
}

// A task to build both, Forge and Fabric
tasks.register("buildBoth") {
    dependsOn project(":fabric").tasks.named("buildBothFabric")
    dependsOn project(":forge").tasks.named("buildBothForge")
}

tasks.register("multiplatformDatagen") {
    Project common = project(":common")
    Project fabric = project(":fabric")
    Project forge = project(":forge")
    dependsOn project(":fabric").tasks.named("runDatagen")
    // Copy the fabric only recipes to the generated resources
    File fabricDir = fabric.file("src/main/generated/data/estrogen/recipes/")
    File forgeDir = forge.file("src/main/generated/data/estrogen/recipes/")

    delete(fabricDir)
    delete(forgeDir)

    copy {
        from common.file("src/main/generated/data/estrogen/recipes/.fabric")
        include "**/*.json"
        into fabric.file("src/main/generated/data/estrogen/recipes/")
    }
    // Copy the forge only recipes to the generated resources
    copy {
        from common.file("src/main/generated/data/estrogen/recipes/.forge")
        include "**/*.json"
        into forge.file("src/main/generated/data/estrogen/recipes/")
    }
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft("com.mojang:minecraft:${rootProject.minecraft_version}")
        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-${rootProject.minecraft_version}:${rootProject.parchmentmc_version}@zip")
        }

        modApi("com.teamresourceful.resourcefullib:resourcefullib-${project.name}-${rootProject.minecraft_version}:${rootProject.resourcefullib_version}")
        modApi("earth.terrarium.botarium:botarium-${project.name}-${rootProject.minecraft_version}:${rootProject.botarium_version}")

        modImplementation include("maven.modrinth:jukeboxfix:${rootProject.jukeboxfix_version}-${rootProject.minecraft_version}")

        // JEI
        modCompileOnly("mezz.jei:jei-${rootProject.minecraft_version}-common-api:${rootProject.jei_version}")
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version
    group = rootProject.maven_group

    // repositories for all the build.gradle files, makes it a lot easier to manage
    // Format is: name: name of the maven, description: mods that use this maven, url: the url of the maven
    repositories {
        maven { name = "Terraformers Maven"; description = "EMI & Mod Menu"; url = "https://maven.terraformersmc.com/" }
        maven { name = "Shedaniel Maven"; description = "REI"; url = "https://maven.shedaniel.me" }
        maven { name = "Blamejared Maven"; description = "JEI"; url = "https://maven.blamejared.com/" }
        maven { name = "Tterrag Maven"; description = "Create, Forge Registrate & Forge Flywheel"; url = "https://maven.tterrag.com" }
        maven { name = "TheIllusivec4 Maven"; description = "Curios"; url = "https://maven.theillusivec4.top/" }
        maven { name = "Devos Maven"; description = "Create Fabric, Porting Lib, Forge Tags, Milk Lib & Fabric Registrate"; url = "https://mvn.devos.one/snapshots/" }
        maven { name = "Curseforge Maven"; description = "Forge Config API Port"; url = "https://cursemaven.com" }
        maven { name = "Cafeteria Maven"; description = "Fake Player API"; url = "https://maven.cafeteria.dev/releases" }
        maven { name = "JamiesWhiteShirt Maven"; description = "Reach Entity Attributes"; url = "https://maven.jamieswhiteshirt.com/libs-release" }
        maven { name = "Ladysnake Maven"; description = "Trinkets"; url = "https://maven.ladysnake.org/releases" }
        maven { name = "Unascribed Maven"; description = "Ears"; url = "https://repo.unascribed.com" }
        maven { name = "Modrinth Maven"; description = "Jukeboxfix, Ad Astra"; url = "https://api.modrinth.com/maven" }
        maven { name = "Resourceful Maven"; description = "Baubly, Botarium & ResourcefulLib"; url = "https://maven.teamresourceful.com/repository/maven-public/" }
        maven { name = "Figura Maven"; description = "Figura"; url = "https://maven.figuramc.org/releases" }
        maven { name = "Jitpack maven"; description = "Mixin Extras & Fabric ASM"; url = "https://jitpack.io/" } //NOTE: LEAVE THIS AS LAST
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        options.release.set(17)
    }

    java {
        withSourcesJar()
    }
}

publishMods {
    changelog = file("CHANGELOG.md").text.replace("@VERSION@", rootProject.mod_version)
    type = STABLE

    def optionsCurseforge = curseforgeOptions {
        accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
        minecraftVersions.add("1.20.1")
        projectId = "850410"
        requires {
            slug = "botarium"
        }
        requires {
            slug = "resourceful-lib"
        }
        optional {
            slug = "ears"
        }
        embeds {
            slug = "jukeboxfix"
        }
    }

    def optionsModrinth = modrinthOptions {
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        projectId = "HhIJW8n1"
        minecraftVersions.add("1.20.1")
        requires {
            slug = "botarium"
        }
        requires {
            slug = "resourceful-lib"
        }
        optional {
            slug = "ears"
        }
        embeds {
            slug = "jukeboxfix"
        }
    }

    curseforge("curseforgeFabric") {
        from optionsCurseforge
        modLoaders.add("fabric")
        modLoaders.add("quilt")
        file = project(":fabric").tasks.named("remapJar").get().archiveFile
        displayName = "Create: Estrogen ${rootProject.mod_version} Fabric"
        version = "${rootProject.mod_version}-fabric"
        requires {
            slug = "create-fabric"
        }
        requires {
            slug = "trinkets"
        }
        optional {
            slug = "roughly-enough-items"
        }
        optional {
            slug = "emi"
        }
    }

    curseforge("curseforgeForge") {
        from optionsCurseforge
        modLoaders.add("forge")
        file = project(":forge").tasks.named("remapJar").get().archiveFile
        displayName = "Create: Estrogen ${rootProject.mod_version} Forge"
        version = "${rootProject.mod_version}-forge"
        requires {
            slug = "create"
        }
        requires {
            slug = "curios"
        }
        optional {
            slug = "jei"
        }
    }

    modrinth("modrinthFabric") {
        from optionsModrinth
        modLoaders.add("fabric")
        modLoaders.add("quilt")
        file = project(":fabric").tasks.named("remapJar").get().archiveFile
        displayName = "Create: Estrogen ${rootProject.mod_version} Fabric"
        version = "${rootProject.mod_version}-fabric"
        requires {
            slug = "create-fabric"
        }
        requires {
            slug = "trinkets"
        }
        optional {
            slug = "rei"
        }
        optional {
            slug = "emi"
        }
    }

    modrinth("modrinthForge") {
        from optionsModrinth
        modLoaders.add("forge")
        file = project(":forge").tasks.named("remapJar").get().archiveFile
        displayName = "Create: Estrogen ${rootProject.mod_version} Forge"
        version = "${rootProject.mod_version}-forge"
        requires {
            slug = "create"
        }
        requires {
            slug = "curios"
        }
        optional {
            slug = "jei"
        }
    }
}