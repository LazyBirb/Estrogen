repositories {}

dependencies {
    // We depend on fabric loader here to use the fabric @Environment annotations and get the mixin dependencies
    // Do NOT use other classes from fabric loader
    modImplementation("net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}")

    // Fapi
    modApi("net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}")

    // Architectury
    modApi("dev.architectury:architectury:${rootProject.architectury_version}")

    // Create
    modCompileOnly("com.simibubi.create:create-fabric-${rootProject.minecraft_version}:${rootProject.create_fabric_version}+mc${rootProject.minecraft_version}")

    // Trinkets
    modCompileOnly("dev.emi:trinkets:${rootProject.trinkets_version}")

    // Ears
    implementation("com.unascribed:ears-api:${rootProject.ears_version}")

    // Figura
    modCompileOnly("org.figuramc:figura-common-mojmap:${rootProject.figura_version}") transitive false

    // Mixin Extras
    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:${rootProject.mixin_extras_version}"))
}

architectury {
    common("fabric", "forge")
}

processResources.duplicatesStrategy = DuplicatesStrategy.INCLUDE

publishing {
    publications {
        mavenCommon(MavenPublication) {
            artifactId = rootProject.archives_base_name
            from components.java
        }
    }

    repositories {}
}

sourceSets {
    main {
        // Platform specific generated files
        resources {
            srcDirs += [
                    'src/main/generated'
            ]
            exclude ".cache/**"
            exclude "**/.fabric"
            exclude "**/.forge"

        }
    }
}

loom {
    accessWidenerPath = file("src/main/resources/estrogen.accesswidener")
}
